@page "/evento-detalhes/{id}"
@using System.IdentityModel.Tokens.Jwt
@using BusinessLogic.Models
@using BusinessLogic.Services
@inject IInscricaoEventoService ServiceInscricaoEvento
@inject IInscricaoAtividadeService ServiceInscricaoAtividade
@inject IEventoService ServiceEvento
@inject IJSRuntime JsRuntime
@inject HttpClient Http


<h3>Detalhes do Evento</h3>

@if (_evento == null)
{
    <p>
        <em>Evento não encontrado... @Id</em>
    </p>
}
else
{
    <div class="evento-details">
        <h4>@_evento.Nome</h4>
        <p>Data: @_evento.Data.ToShortDateString()</p>
        <p>Hora: @_evento.Hora</p>
        <p>Local: @_evento.Local</p>
        <p>Categoria: @_evento.Categoria</p>
        <p>Capacidade: @_evento.Capacidade</p>
        <p>Número de Atividades: @_evento.NumeroAtidades</p>
        <p>Ingresso Barato: @_evento.IngressoBarato</p>
    </div>

    <h4>Atividades do Evento</h4>
    @if (_evento.Atividades != null && _evento.Atividades.Any())
    {
        <ul>
            @foreach (var atividade in _evento.Atividades)
            {
                <h5>@atividade.Nome</h5>
                <li>@atividade.Data</li>
                <li>@atividade.Hora</li>
                <li>@atividade.Descricao</li>
                
                @if (_jaInscrito)
                {
                    <button @onclick="() => RegistrarAtividade(atividade.Id)">Registrar-se na Atividade</button>
                }
            }
        </ul>
    }
    else
    {
        <p>
            <em>Nenhuma atividade encontrada para este evento.</em>
        </p>
    }
    @if (_jaInscrito)
    {
        <h4>Remover Evento</h4>
        <button @onclick="() => RemoverInscricaoEvento(_evento)" >Remover-se do Evento</button>
    }
    else
    {
        <h4>Escolha o Ingresso</h4>
        <select @bind="_selectedIngresso">
            <option value="">Selecione um ingresso</option>
            @if (_evento.Ingressos != null)
            {
                foreach (var ingresso in _evento.Ingressos)
                {
                    <option value="@ingresso.Id">@ingresso.Nome - @ingresso.Preco</option>
                }
            }
        </select>

        <button @onclick="RegistrarEvento" disabled="@string.IsNullOrEmpty(_selectedIngresso)">Registrar-se no Evento</button>
    }
}

@code {
    private EventoDetailsModel? _evento;
    private string? _selectedIngresso;
    private bool _jaInscrito;
    
    private async Task RemoverInscricaoEvento(EventoDetailsModel eventoDetails)
    {
        Guid? id = await ServiceInscricaoEvento.GetInscricaoByEventoParticipanteId(eventoDetails.Id, Guid.Parse(_tokenClaims["idUtilizador"]));
        if (id != null)
        {
            bool removido = await ServiceInscricaoEvento.RemoverInscricao(id.Value);
            if (removido) _jaInscrito = false;
        }
    }
    
    private async Task RegistrarEvento()
    {
        if (_selectedIngresso == null) return;
        if (Id == null) return;
        if (_jaInscrito) return;
        
        var model = new CreateInscricaoEventoModel()
        {
            IdParticipante = Guid.Parse(_tokenClaims["idUtilizador"]),
            IdEvento = Guid.Parse(Id),
            TipoIngresso = Guid.Parse(_selectedIngresso)
        };

        bool inscrito = await ServiceInscricaoEvento.Inscrever(model);
        if (inscrito) _jaInscrito = true;
    }
    
    private async Task RegistrarAtividade(Guid atividadeId)
    {
        if(!_jaInscrito) return;
        
        bool inscrito = await ServiceInscricaoAtividade.VerificarInscricaoAtividade(atividadeId, Guid.Parse(_tokenClaims["idUtilizador"]));

        if (inscrito)
        {
            Console.WriteLine("Já Inscrito");
            return;
        }

        var model = new CreateInscricaoAtividadeModel()
        {
            IdParticipante = Guid.Parse(_tokenClaims["idUtilizador"]),
            IdAtividade = atividadeId
        };

        inscrito = await ServiceInscricaoAtividade.Inscrever(model);
        
        if (inscrito) Console.Write("Sucesso");
    }
    
    
    [Parameter]
    public string? Id { get; set; }

    protected async Task HandleEvento()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            _evento = await ServiceEvento.GetDetalhesEvento(Guid.Parse(Id));
            
            if (_evento == null) NavigationManager?.NavigateTo("/");
        }
    }
    
    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    private Dictionary<string, string> _tokenClaims = new Dictionary<string, string>();
    protected override async Task OnInitializedAsync()
    {
        var token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            var jwtHandler = new JwtSecurityTokenHandler();
            var decodedToken = jwtHandler.ReadJwtToken(token);

            _tokenClaims = decodedToken.Claims.ToDictionary(c => c.Type, c => c.Value);
            
            if (_tokenClaims["role"] != "Participante" && _tokenClaims["role"] != "Organizador")
            {
                NavigationManager?.NavigateTo("/login");
            }
        }
        else
        {
            NavigationManager?.NavigateTo("/login");
        }
        
        await HandleEvento();

        _jaInscrito = await ServiceInscricaoEvento.VerificarInscricaoEvento(Guid.Parse(Id), Guid.Parse(_tokenClaims["idUtilizador"]));
    }
    
}

<style>
    .evento-details {
        border: 1px solid #ccc;
        padding: 10px;
    }
</style>
