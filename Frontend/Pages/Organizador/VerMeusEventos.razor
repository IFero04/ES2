@page "/eventos/{idOrganizador}"
@using System.ComponentModel.DataAnnotations
@using System.IdentityModel.Tokens.Jwt
@using BusinessLogic.Models
@inject HttpClient Http
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<h3>VerEventosOrganizador</h3>

@if (eventos == null)
{
    <p>
        <em>Sem Eventos...</em>
    </p>
}
else
{
    <div class="eventos-container">
        @foreach (var evento in eventos)
        {
            <div class="evento-card">
                <h4>@evento.Nome</h4>
                <p>Data: @evento.Data.ToShortDateString()</p>
                <p>Hora: @evento.Hora</p>
                <p>Local: @evento.Local</p>
                <p>Categoria: @evento.Categoria</p>
                <p>Capacidade: @evento.Capacidade</p>
                <p>Número de Atividades: @evento.NumeroAtidades</p>
                <p>Ingresso Barato: @evento.IngressoBarato</p>
                <p>Participantes Inscritos: @evento.ParticipantesInscritos</p>
                <button class="btn-acessar-evento" @onclick="() => AcessarEvento(evento)">Acessar Evento</button>
            </div>
        }
    </div>
}

@code {
    List<EventoDetailsModel>? eventos = new List<EventoDetailsModel>();
    [Parameter]
    public string idOrganizador { get; set; }

    private async Task HandleGetEventos()
    {
        if (!string.IsNullOrEmpty(idOrganizador))
        {
            eventos = await Http.GetFromJsonAsync<List<EventoDetailsModel>>($"http://localhost:5052/api/Evento/organizador/{Guid.Parse(idOrganizador)}");
        }
    }

    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    private Dictionary<string, string> _tokenClaims = new Dictionary<string, string>();
    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            var jwtHandler = new JwtSecurityTokenHandler();
            var decodedToken = jwtHandler.ReadJwtToken(token);

            _tokenClaims = decodedToken.Claims.ToDictionary(c => c.Type, c => c.Value);

            if (_tokenClaims["role"] != "Organizador")
            {
                NavigationManager?.NavigateTo("/");
            }

            idOrganizador = _tokenClaims["idUtilizador"];
        }

        await HandleGetEventos();
    }

    private void AcessarEvento(EventoDetailsModel eventoDetails)
    {
        // Redirecionar para a página de detalhes do evento com base no ID do evento
        NavigationManager?.NavigateTo($"/detalhes-evento/{eventoDetails.Id}");
    }
}

<style>
    .eventos-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .evento-card {
        border: 1px solid #ccc;
        padding: 10px;
    }

    .btn-acessar-evento {
        margin-top: 10px;
    }
</style>
