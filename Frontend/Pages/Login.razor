@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Net
@using BusinessLogic.Models
@inject HttpClient Http
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
<h3>Login</h3>

<EditForm Model="@_loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="@_loginModel.Username" />
        <ValidationMessage For="@(() => _loginModel.Username)" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="@_loginModel.Password" type="password"/>
        <ValidationMessage For="@(() => _loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
    
    @if (!string.IsNullOrEmpty(_loginModel.ErrorMessage))
    {
        <p class="text-danger">@_loginModel.ErrorMessage</p>
    }
</EditForm>

@code {
    private readonly LoginModel _loginModel = new LoginModel();

    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    private IJSRuntime JsRuntime { get; set; }
    private async Task HandleLogin()
    {
        _loginModel.ErrorMessage = String.Empty;

        var authmodel = new AuthModel()
        {
            Username = _loginModel.Username,
            Password = _loginModel.Password,
            Tipo = "ToChange"
        };

        var response = await Http.PostAsJsonAsync("http://localhost:5052/api/Auth/token", authmodel);

        if (response.IsSuccessStatusCode)
        {
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
            var token = tokenResponse?.Token;

            if (!string.IsNullOrEmpty(token))
            {
                // Armazenar o token em Local Storage
                await JSRuntime.InvokeAsync<object>("localStorage.setItem", "token", token);

                // Verificar o armazenamento em Local Storage
                var storedToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
                if (token == storedToken)
                {
                    // O armazenamento em Local Storage está funcionando corretamente
                    NavigationManager?.NavigateTo("/");
                }
                else
                {
                    // Ocorreu um erro no armazenamento em Local Storage
                    _loginModel.ErrorMessage = "Ocorreu um erro no armazenamento em Local Storage.";
                }
            }
            else
            {
                _loginModel.ErrorMessage = "O token não foi retornado na resposta.";
            }
        }
        else if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            _loginModel.ErrorMessage = "Credenciais inválidas";
        }
        else
        {
            _loginModel.ErrorMessage = "Ocorreu um erro durante o login. Por favor, tente novamente mais tarde.";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "O nome de usuário é obrigatório.")]
        public string Username { get; set; } = null!;

        [Required(ErrorMessage = "A senha é obrigatória.")]
        public string Password { get; set; } = null!;

        public string ErrorMessage { get; set; } = null!;
    }

    public class TokenResponse
    {
        public string? Token { get; set; }
    }
}
