@page "/register"
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using System.Net
@using System.Net.Http
@using System.Net.Http.Json
@using BusinessLogic.Models
@inject HttpClient Http

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="@registerModel.Name" />
        <ValidationMessage For="@(() => registerModel.Name)" />
    </div>
    
    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="@registerModel.Username" />
        <ValidationMessage For="@(() => registerModel.Username)" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="@registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="@registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password:</label>
        <InputText id="confirmPassword" class="form-control" @bind-Value="@registerModel.ConfirmPassword" />
        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
    </div>

    <div class="form-group">
        <label for="phone">Phone:</label>
        <InputText id="phone" class="form-control" @bind-Value="@registerModel.Phone" />
        <ValidationMessage For="@(() => registerModel.Phone)" />
    </div>

    <div class="form-group">
        <label class="form-check-label">
            <InputCheckbox @bind-Value="@registerModel.IsOrganizer"/>
            Organizer
        </label>
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
    
    @if (!string.IsNullOrEmpty(registerModel.ErrorMessage))
    {
        <p class="text-danger">@registerModel.ErrorMessage</p>
    }
</EditForm>

@code {
    private RegisterModel registerModel = new RegisterModel();

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private async Task HandleRegister()
    {
        registerModel.ErrorMessage = String.Empty;

        var createUtilizadorModel = new CreateUtilizadorModel()
        {
            Nome = registerModel.Name,
            Email = registerModel.Email,
            Username = registerModel.Username,
            Senha = registerModel.Password,
            Telefone = string.IsNullOrEmpty(registerModel.Phone) ? null : registerModel.Phone,
            Organizador = registerModel.IsOrganizer
        };

        var response = await Http.PostAsJsonAsync("http://localhost:5052/api/Utilizador", createUtilizadorModel);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/login");
        }
        else if (response.StatusCode == HttpStatusCode.Conflict)
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            registerModel.ErrorMessage = errorContent;
        }
        else
        {
            registerModel.ErrorMessage = "An error occurred during registration. Please try again later.";
        }
    }
    
    public class RegisterModel
    {
        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }

        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }

        public string? Phone { get; set; }

        public bool IsOrganizer { get; set; }

        public string ErrorMessage { get; set; }
    }
}
